@{%

const nm = require('nearley-moo')
const tokens = require('./tokens.js')

nm(tokens)

%}

input 
    -> _ value _ 
        {% (data) => data[1] %}
    | identifier {% id %}

value 
    -> number {% id %}
    | boolean {% id %}
    | string {% id %}
    | array {% id %}
    | cNull {% id %}

identifier -> nonDigit idtail
    {% (data) => data.join("") %}

idtail 
    -> nonDigit idtail
        {% (data) => data.join("") %}
    | digit idtail
        {% (data) => data.join("") %}
    | digit
        {% id %}
    | nonDigit
        {% id %}

array 
    -> "[" _ array_items _ "]"
        {% (data) => data[2] %}
    | "[" _ "]"
        {% () => [] %}

array_items
    -> value 
        {% (data) => [data[0]] %}
    | value _ "," _ array_items
        {% (data) => [data[0], ...data[4]] %}

string -> "\"" characters "\""
    {% (data) => data[1] %}

characters 
    -> character {% id %}
    | character characters
        {% (data) => data[0] + data[1] %}

character 
    -> [^\"\\] {% id %}
    | "\\" escape
        {% (data) => data[1] %}

escape
    -> "\"" {% () => '"' %}
    | "\\" {% () => "\\" %}
    | "/" {% () => "/" %}
    | "b" {% () => "\b" %}  
    | "f" {% () => "\f" %}
    | "n" {% () => "\n" %}
    | "r" {% () => "\r" %}
    | "t" {% () => "\t" %}
    | "u" hex hex hex hex
        {% (data) => {
                const code = (((((data[1]*16) + data[2])*16) + data[3])*16 + data[4])
                return String.fromCharCode(code)
            } 
        %}

hex
    -> digit 
        {% (data) =>  Number(data[0]) %}
    | [a-fA-F] 
        {% 
            (data) =>  {
                switch (data[0].toLowerCase()) {
                    case 'a': return 10;
                    case 'b': return 11;
                    case 'c': return 12;
                    case 'd': return 13;
                    case 'e': return 14;
                    case 'f': return 15;
                    default: return data[0];
                }
            }
        %}

cNull -> "null"
    {% () => null %}

boolean
    -> %boolean_true
        {% () => true %}
    | %boolean_false
        {% () => false %}

number 
    -> digits 
        {% (data) => Number(data) %}
    | digits "." digits
        {% (data) => Number(data.join("")) %}

digits 
    -> digit {% id %}
    | digit digits
        {% (data) => data.join("") %}

digit -> [0-9] {% id %}

nonDigit -> [a-zA-Z_] {% id %}

_ -> [ \t]:*