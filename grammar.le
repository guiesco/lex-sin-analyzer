@{%
const tokens = require('./tokens.js')
%}

@lexer tokens

input 
    -> _ value _ 
        {% (data) => data[1] %}
    | identifier {% id %}
    | attribution
    | declaration
    | keyword {% id %}
    | additive {% id %}


declaration 
    -> %type_modifier:? _ %type_keyword _ identifier _
        {% (data) => {
            return {
                type: 'declaration',
                data
            }
        } %}
    | %type_modifier:? _ %type_keyword _ attribution
        {% (data) => {
            return {
                type: 'declaration',
                data
            }
        } %}

attribution
    -> identifier _ "=" _ value
        {% (data) => {
            return {
                type: 'attribution',
                data
            }
        } %}

keyword -> %keyword {% id %}

additive
    -> multiplicative _  plus _ additive
        {%
            (data) => {
                return {
                    type: "operation",
                    op: data[2],
                    left: data[0],
                    right: data[4]
                };
            }
        %}
    | lparan _ multiplicative _  plus _ additive _ rparan
        {%
            (data) => {
                return {
                    type: "operation",
                    op: data[4],
                    left: data[2],
                    right: data[6]
                };
            }
        %} 
    | multiplicative _  minus _ additive
        {%
            (data) => {
                return {
                    type: "operation",
                    op: data[2],
                    left: data[0],
                    right: data[4]
                };
            }

        %}
    | lparan _ multiplicative _  minus _ additive _ rparan
        {%
            (data) => {
                return {
                    type: "operation",
                    op: data[4],
                    left: data[2],
                    right: data[6]
                };
            }
        %} 
    | lparan _ multiplicative _ rparan {%   (data) => data[2] %}
    | multiplicative {% id %}


multiplicative 
    -> number _ times _ multiplicative
        {%
            (data) => {
                return {
                    type: "operation",
                    op: data[2],
                    left: data[0],
                    right: data[4]
                };
            }
        %}
    | lparan _ number _ times _ multiplicative _ rparan
        {%
            (data) => {
                return {
                    type: "operation",
                    op: data[4],
                    left: data[2],
                    right: data[6]
                };
            }
        %} 
    | number _ divide _ multiplicative
        {%
            (data) => {
                return {
                    type: "operation",
                    op: data[2],
                    left: data[0],
                    right: data[4]
                };
            }
        %} 
    | lparan _ number _ divide _ multiplicative _ rparan
        {%
            (data) => {
                return {
                    type: "operation",
                    op: data[4],
                    left: data[2],
                    right: data[6]
                };
            }
        %} 
    | lparan _ number _ rparan {%   (data) => data[2] %}
    | number {% id %}


value 
    -> number {% id %}
    | boolean {% id %}
    | %string {% id %}
    | array {% id %}
    | cNull {% id %}

identifier -> %identifier {% id %}

array 
    -> "[" _ array_items _ "]"
        {% (data) => data[2] %}
    | "[" _ "]"
        {% () => [] %}

array_items
    -> value 
        {% (data) => [data[0]] %}
    | value _ "," _ array_items
        {% (data) => [data[0], ...data[4]] %}

string -> "\"" characters "\""
    {% (data) => data[1] %}

characters 
    -> character {% id %}
    | character characters
        {% (data) => data[0] + data[1] %}

character 
    -> [^\"\\] {% id %}
    | "\\" escape
        {% (data) => data[1] %}

escape
    -> "\"" {% () => '"' %}
    | "\\" {% () => "\\" %}
    | "/" {% () => "/" %}
    | "b" {% () => "\b" %}  
    | "f" {% () => "\f" %}
    | "n" {% () => "\n" %}
    | "r" {% () => "\r" %}
    | "t" {% () => "\t" %}
    | "u" hex hex hex hex
        {% (data) => {
                const code = (((((data[1]*16) + data[2])*16) + data[3])*16 + data[4])
                return String.fromCharCode(code)
            } 
        %}

hex
    -> %number
        {% (data) =>  Number(data[0]) %}
    | [a-fA-F] 
        {% 
            (data) =>  {
                switch (data[0].toLowerCase()) {
                    case 'a': return 10;
                    case 'b': return 11;
                    case 'c': return 12;
                    case 'd': return 13;
                    case 'e': return 14;
                    case 'f': return 15;
                    default: return data[0];
                }
            }
        %}

cNull -> %cNull
    {% () => null %}

boolean
    -> %boolean_true
        {% () => true %}
    | %boolean_false
        {% () => false %}

number 
    -> %number {% id %}

rparan 
    -> %rparan {% id %}

lparan 
    -> %lparan {% id %}

plus 
    -> %plus {% id %}

minus 
    -> %minus {% id %}

times 
    -> %times {% id %}

divide 
    -> %divide {% id %}

nonDigit -> [a-zA-Z_] {% id %}

_ -> %whitespace:* {% id %}